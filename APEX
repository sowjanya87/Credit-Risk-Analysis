#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 24 16:50:15 2019

@author: sowjanyamattaparthi
"""
#Load the librarys
import pandas as pd #To work with dataset
import numpy as np #Math library
import seaborn as sns #Graph library that use matplot in background
import matplotlib.pyplot as plt #to plot some parameters in seaborn

# Importing the dataset
dataset = pd.read_csv('credit.csv')

dataset.head() #top 5 rows of the dataset

#Information about the data
dataset.info()
# No of observations and attributes
dataset.shape

# Summary of descriptive statistics
dataset.describe()

#Listing out names of columns
column_names=dataset.columns.tolist()

#How much the amount varies.
import matplotlib.pyplot as plt

num_bins = 10
plt.hist(dataset['credit_amount'], num_bins, normed=1, facecolor='blue', alpha=0.7)
plt.show()

#BUILDING A MODEL


#First Look at the data:
#Looking the Type of Data
#Null Numbers
#Unique values
#The first rows of our dataset
print(dataset.info())

#Looking unique values
print(dataset.nunique())
#Looking the data
print(dataset.head())

#Let's start looking through target variable and their distribuition

# it's a library that we work with plotly
import plotly.offline as py 
py.init_notebook_mode(connected=True) # this code, allow us to work with offline plotly version
import plotly.graph_objs as go # it's like "plt" of matplot
import plotly.tools as tls # It's useful to we get some tools of plotly
import warnings # This library will be used to ignore some warnings
from collections import Counter # To do counter of some features

trace0 = go.Bar(
            x = dataset[dataset["Risk"]== 'good']["Risk"].value_counts().index.values,
            y = dataset[dataset["Risk"]== 'good']["Risk"].value_counts().values,
            name='Good credit'
    )

trace1 = go.Bar(
            x = dataset[dataset["Risk"]== 'bad']["Risk"].value_counts().index.values,
            y = dataset[dataset["Risk"]== 'bad']["Risk"].value_counts().values,
            name='Bad credit'
    )

data = [trace0, trace1]

layout = go.Layout(
    
)

layout = go.Layout(
    yaxis=dict(
        title='Count'
    ),
    xaxis=dict(
        title='Risk Variable'
    ),
    title='Target variable distribution'
)

fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='grouped-bar')


